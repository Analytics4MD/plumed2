#
# This is a generic makefile which will work for any
# subpackage which just depends on config/
# It just compiles objects locally
# 

# include the machine dependent configuration
-include ../../Makefile.conf

# if machine dependent configuration has been found:
ifdef GCCDEP

# source for plumed kernel
SRC=$(wildcard *.cpp)

# corresponding objects:
OBJ=$(SRC:.cpp=.o)

# dependency files for all c++ sources
DEP=$(addprefix deps/,$(SRC:.cpp=.d))

# default target
.PHONY: all

all:
	@echo preparing for make
	$(PREMAKE)
	@echo Verify that modules on which this one depends are active
	@for dir in $(USE) ; do ../maketools/check_module.sh $$dir ;  done
	make links
	@echo Compile local objects
	$(MAKE) obj

links: Makefile
	@echo Create links to modules used in $(CURDIR) to simplify header inclusion:
	@for dir in $(USE) ; do test -L $$dir || ln -fs ../$$dir . && echo "   " $$dir ;  done
	@echo Touching a file used to track links update
	touch links
	@echo Acting recursively
	@for dir in $(USE) ; do cd ../$$dir && $(MAKE) links && cd - ;  done
	

.PHONY: obj
obj: $(OBJ)

.PHONY: lib
lib:
	cd ../lib ; make

.PHONY: install
install:
	cd ../lib ; make install

-include $(DEP)

# if machine dependent configuration has not been found:
else

.PHONY: error
error:
	@echo No configuration available
	@echo First run ./configure.sh in the root directory
endif

# this target is available anyway

.PHONY: clean
clean:
	-for file in * ; do test -L $$file && rm -f $$file ; done
	rm -fr deps links
	rm -f $(CLEANLIST)

# generic makefile rules
include ../maketools/make.rules

